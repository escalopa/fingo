// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id,
                   first_name,
                   last_name,
                   username,
                   gender,
                   birthday,
                   email,
                   phone_number,
                   hashed_password)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateUserParams struct {
	ID             uuid.UUID   `db:"id" json:"id"`
	FirstName      string      `db:"first_name" json:"first_name"`
	LastName       string      `db:"last_name" json:"last_name"`
	Username       string      `db:"username" json:"username"`
	Gender         interface{} `db:"gender" json:"gender"`
	Birthday       time.Time   `db:"birthday" json:"birthday"`
	Email          string      `db:"email" json:"email"`
	PhoneNumber    string      `db:"phone_number" json:"phone_number"`
	HashedPassword string      `db:"hashed_password" json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Gender,
		arg.Birthday,
		arg.Email,
		arg.PhoneNumber,
		arg.HashedPassword,
	)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :execrows
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUserByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, username, gender, email, phone_number, hashed_password, password_changed_at, is_verified_email, is_verified_phone, birthday, created_at
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Gender,
		&i.Email,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.IsVerifiedEmail,
		&i.IsVerifiedPhone,
		&i.Birthday,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, username, gender, email, phone_number, hashed_password, password_changed_at, is_verified_email, is_verified_phone, birthday, created_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Gender,
		&i.Email,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.IsVerifiedEmail,
		&i.IsVerifiedPhone,
		&i.Birthday,
		&i.CreatedAt,
	)
	return i, err
}
