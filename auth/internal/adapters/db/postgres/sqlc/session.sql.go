// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (id, user_id, refresh_token, user_agent, client_ip, expires_at, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateSessionParams struct {
	ID           uuid.UUID `db:"id" json:"id"`
	UserID       uuid.UUID `db:"user_id" json:"user_id"`
	RefreshToken string    `db:"refresh_token" json:"refresh_token"`
	UserAgent    string    `db:"user_agent" json:"user_agent"`
	ClientIp     string    `db:"client_ip" json:"client_ip"`
	ExpiresAt    time.Time `db:"expires_at" json:"expires_at"`
	CreatedAt    time.Time `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, refresh_token, is_blocked, user_agent, client_ip, expires_at, created_at
FROM sessions
WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserDevices = `-- name: GetUserDevices :many
SELECT user_agent, client_ip
FROM sessions
WHERE user_id = $1
`

type GetUserDevicesRow struct {
	UserAgent string `db:"user_agent" json:"user_agent"`
	ClientIp  string `db:"client_ip" json:"client_ip"`
}

func (q *Queries) GetUserDevices(ctx context.Context, userID uuid.UUID) ([]GetUserDevicesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserDevices, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserDevicesRow{}
	for rows.Next() {
		var i GetUserDevicesRow
		if err := rows.Scan(&i.UserAgent, &i.ClientIp); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSessions = `-- name: GetUserSessions :many
SELECT id, user_id, refresh_token, is_blocked, user_agent, client_ip, expires_at, created_at
FROM sessions
WHERE user_id = $1
`

func (q *Queries) GetUserSessions(ctx context.Context, userID uuid.UUID) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getUserSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshToken,
			&i.IsBlocked,
			&i.UserAgent,
			&i.ClientIp,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setSessionIsBlocked = `-- name: SetSessionIsBlocked :exec
UPDATE sessions
SET is_blocked = $2
WHERE id = $1
`

type SetSessionIsBlockedParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	IsBlocked bool      `db:"is_blocked" json:"is_blocked"`
}

func (q *Queries) SetSessionIsBlocked(ctx context.Context, arg SetSessionIsBlockedParams) error {
	_, err := q.db.ExecContext(ctx, setSessionIsBlocked, arg.ID, arg.IsBlocked)
	return err
}
