version: "3.8"

services:
  auth:
    container_name: "auth"
    restart: unless-stopped
    volumes:
      - ./auth:/go/src/github.com/escalopa/fingo/
      - ./pb:/go/src/github.com/escalopa/fingo/
    environment:
      - AUTH_GRPC_PORT=${AUTH_GRPC_PORT}
      - AUTH_DATABASE_URL=${AUTH_DATABASE_URL}
      - AUTH_DATABASE_MIGRATION_PATH=${AUTH_DATABASE_MIGRATION_PATH}
      - AUTH_CACHE_URL=${AUTH_CACHE_URL}
      - AUTH_RABBITMQ_URL={AUTH_RABBITMQ_URL}

      - AUTH_TOKEN_SECRET=${AUTH_TOKEN_SECRET}
      - AUTH_ACCESS_TOKEN_DURATION=${AUTH_ACCESS_TOKEN_DURATION}
      - AUTH_REFRESH_TOKEN_DURATION=${AUTH_REFRESH_TOKEN_DURATION}
      - AUTH_USER_SESSION_DURATION=${AUTH_USER_SESSION_DURATION}
    ports:
      - "${AUTH_GRPC_PORT}:${AUTH_GRPC_PORT}"
    build:
      context: .
      dockerfile: ./_deployments/Dockerfile.auth
      target: development
    depends_on:
      - cache
      - email
      - db

  email:
    container_name: "email"
    restart: unless-stopped
    volumes:
      - ./email:/go/src/github.com/escalopa/fingo/
    environment:
      - EMAIL_CODES_EXPIRATION={EMAIL_CODES_EXPIRATION}
      - EMAIL_SEND_CODE_MIN_INTERVAL={EMAIL_SEND_CODE_MIN_INTERVAL}
      - EMAIL_SEND_RESET_PASSWORD_TOKEN_MIN_INTERVAL={EMAIL_SEND_RESET_PASSWORD_TOKEN_MIN_INTERVAL}

      - EMAIL_RABBITMQ_URL={EMAIL_RABBITMQ_URL}
      - EMAIL_RABBITMQ_VERIFICATION_CODE_QUEUE_NAME={EMAIL_RABBITMQ_VERIFICATION_CODE_QUEUE_NAME}
      - EMAIL_RABBITMQ_RESET_PASSWORD_TOKEN_QUEUE_NAME={EMAIL_RABBITMQ_RESET_PASSWORD_TOKEN_QUEUE_NAME}
      - EMAIL_RABBITMQ_NEW_SIGNIN_SESSION_QUEUE_NAME={EMAIL_RABBITMQ_NEW_SIGNIN_SESSION_QUEUE_NAME}

      - EMAIL_COURIER_TOKEN={EMAIL_COURIER_TOKEN}
      - EMAIL_COURIER_VERIFICATION_TEMPLATE_ID={EMAIL_COURIER_VERIFICATION_TEMPLATE_ID}
      - EMAIL_COURIER_RESET_PASSWORD_TEMPLATE_ID={EMAIL_COURIER_RESET_PASSWORD_TEMPLATE_ID}
      - EMAIL_COURIER_NEW_SIGNIN_SESSION_TEMPLATE_ID={EMAIL_COURIER_NEW_SIGNIN_SESSION_TEMPLATE_ID}
    build:
      context: .
      dockerfile: _deployments/Dockerfile.email
      target: development
    depends_on:
        - rabbitmq

  cache:
    image: redis:alpine
    container_name: "cache"
    restart: unless-stopped
    volumes:
      - cache:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  db:
      image: postgres:12
      container_name: "database"
      env_file:
        - ./.db.env
      ports:
        - "5432:5432"
      volumes:
        - db:/var/lib/postgresql/data
        - ./scripts/multiple-database.sh:/docker-entrypoint-initdb.d/multiple-database.sh
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U postgres" ]
        interval: 5s
        timeout: 5s
        retries: 5

  rabbitmq:
    image: rabbitmq:3.10.19-management
    container_name: "rabbitmq"
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - ./.rabbitmq.env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  cache:
  db:
