// Code generated by MockGen. DO NOT EDIT.
// Source: ./contact/internal/application/ports.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	core "github.com/escalopa/fingo/contact/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEmailSender) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEmailSenderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEmailSender)(nil).Close))
}

// SendNewSignInSession mocks base method.
func (m *MockEmailSender) SendNewSignInSession(ctx context.Context, params core.SendNewSignInSessionMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNewSignInSession", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNewSignInSession indicates an expected call of SendNewSignInSession.
func (mr *MockEmailSenderMockRecorder) SendNewSignInSession(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNewSignInSession", reflect.TypeOf((*MockEmailSender)(nil).SendNewSignInSession), ctx, params)
}

// SendResetPasswordToken mocks base method.
func (m *MockEmailSender) SendResetPasswordToken(ctx context.Context, params core.SendResetPasswordTokenMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetPasswordToken", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPasswordToken indicates an expected call of SendResetPasswordToken.
func (mr *MockEmailSenderMockRecorder) SendResetPasswordToken(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPasswordToken", reflect.TypeOf((*MockEmailSender)(nil).SendResetPasswordToken), ctx, params)
}

// SendVerificationCode mocks base method.
func (m *MockEmailSender) SendVerificationCode(ctx context.Context, params core.SendVerificationCodeMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationCode", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationCode indicates an expected call of SendVerificationCode.
func (mr *MockEmailSenderMockRecorder) SendVerificationCode(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationCode", reflect.TypeOf((*MockEmailSender)(nil).SendVerificationCode), ctx, params)
}

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockValidator) Validate(i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), i)
}

// MockMessageConsumer is a mock of MessageConsumer interface.
type MockMessageConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageConsumerMockRecorder
}

// MockMessageConsumerMockRecorder is the mock recorder for MockMessageConsumer.
type MockMessageConsumerMockRecorder struct {
	mock *MockMessageConsumer
}

// NewMockMessageConsumer creates a new mock instance.
func NewMockMessageConsumer(ctrl *gomock.Controller) *MockMessageConsumer {
	mock := &MockMessageConsumer{ctrl: ctrl}
	mock.recorder = &MockMessageConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageConsumer) EXPECT() *MockMessageConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMessageConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMessageConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageConsumer)(nil).Close))
}

// HandleSendNewSignInSession mocks base method.
func (m *MockMessageConsumer) HandleSendNewSignInSession(handler func(context.Context, core.SendNewSignInSessionMessage) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSendNewSignInSession", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSendNewSignInSession indicates an expected call of HandleSendNewSignInSession.
func (mr *MockMessageConsumerMockRecorder) HandleSendNewSignInSession(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSendNewSignInSession", reflect.TypeOf((*MockMessageConsumer)(nil).HandleSendNewSignInSession), handler)
}

// HandleSendResetPasswordToken mocks base method.
func (m *MockMessageConsumer) HandleSendResetPasswordToken(handler func(context.Context, core.SendResetPasswordTokenMessage) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSendResetPasswordToken", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSendResetPasswordToken indicates an expected call of HandleSendResetPasswordToken.
func (mr *MockMessageConsumerMockRecorder) HandleSendResetPasswordToken(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSendResetPasswordToken", reflect.TypeOf((*MockMessageConsumer)(nil).HandleSendResetPasswordToken), handler)
}

// HandleSendVerificationsCode mocks base method.
func (m *MockMessageConsumer) HandleSendVerificationsCode(handler func(context.Context, core.SendVerificationCodeMessage) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSendVerificationsCode", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSendVerificationsCode indicates an expected call of HandleSendVerificationsCode.
func (mr *MockMessageConsumerMockRecorder) HandleSendVerificationsCode(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSendVerificationsCode", reflect.TypeOf((*MockMessageConsumer)(nil).HandleSendVerificationsCode), handler)
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServer)(nil).Start))
}

// Stop mocks base method.
func (m *MockServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServer)(nil).Stop))
}
