// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: card.sql

package db

import (
	"context"
)

const addCardBalance = `-- name: AddCardBalance :exec
UPDATE accounts
SET balance = balance + $1
WHERE id = (SELECT account_id
            FROM cards
            WHERE number = $2)
`

type AddCardBalanceParams struct {
	Balance string `db:"balance" json:"balance"`
	Number  string `db:"number" json:"number"`
}

func (q *Queries) AddCardBalance(ctx context.Context, db DBTX, arg AddCardBalanceParams) error {
	_, err := db.ExecContext(ctx, addCardBalance, arg.Balance, arg.Number)
	return err
}

const createCard = `-- name: CreateCard :exec
INSERT INTO cards (number, account_id)
VALUES ($1, $2)
`

type CreateCardParams struct {
	Number    string `db:"number" json:"number"`
	AccountID int32  `db:"account_id" json:"account_id"`
}

func (q *Queries) CreateCard(ctx context.Context, db DBTX, arg CreateCardParams) error {
	_, err := db.ExecContext(ctx, createCard, arg.Number, arg.AccountID)
	return err
}

const deleteAccountCards = `-- name: DeleteAccountCards :exec
DELETE
FROM cards
WHERE account_id = $1
`

func (q *Queries) DeleteAccountCards(ctx context.Context, db DBTX, accountID int32) error {
	_, err := db.ExecContext(ctx, deleteAccountCards, accountID)
	return err
}

const deleteCard = `-- name: DeleteCard :exec
DELETE
FROM cards
WHERE number = $1
`

func (q *Queries) DeleteCard(ctx context.Context, db DBTX, number string) error {
	_, err := db.ExecContext(ctx, deleteCard, number)
	return err
}

const getAccountCards = `-- name: GetAccountCards :many
SELECT number, account_id
FROM cards
WHERE account_id = $1
`

func (q *Queries) GetAccountCards(ctx context.Context, db DBTX, accountID int32) ([]Card, error) {
	rows, err := db.QueryContext(ctx, getAccountCards, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Card{}
	for rows.Next() {
		var i Card
		if err := rows.Scan(&i.Number, &i.AccountID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCard = `-- name: GetCard :one
SELECT number, account_id
FROM cards
WHERE number = $1
`

func (q *Queries) GetCard(ctx context.Context, db DBTX, number string) (Card, error) {
	row := db.QueryRowContext(ctx, getCard, number)
	var i Card
	err := row.Scan(&i.Number, &i.AccountID)
	return i, err
}

const getCardBalance = `-- name: GetCardBalance :one
SELECT balance
FROM accounts
WHERE id = (SELECT account_id
            FROM cards
            WHERE number = $1)
`

func (q *Queries) GetCardBalance(ctx context.Context, db DBTX, number string) (string, error) {
	row := db.QueryRowContext(ctx, getCardBalance, number)
	var balance string
	err := row.Scan(&balance)
	return balance, err
}

const getUserCards = `-- name: GetUserCards :many
SELECT cards.number, cards.account_id, accounts.currency_id
FROM cards
       INNER JOIN accounts ON accounts.id = cards.account_id
WHERE accounts.user_id = $1
`

type GetUserCardsRow struct {
	Number     string `db:"number" json:"number"`
	AccountID  int32  `db:"account_id" json:"account_id"`
	CurrencyID int16  `db:"currency_id" json:"currency_id"`
}

func (q *Queries) GetUserCards(ctx context.Context, db DBTX, userID int32) ([]GetUserCardsRow, error) {
	rows, err := db.QueryContext(ctx, getUserCards, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserCardsRow{}
	for rows.Next() {
		var i GetUserCardsRow
		if err := rows.Scan(&i.Number, &i.AccountID, &i.CurrencyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subtractCardBalance = `-- name: SubtractCardBalance :exec
UPDATE accounts
SET balance = balance - $1
WHERE id = (SELECT account_id
            FROM cards
            WHERE number = $2)
`

type SubtractCardBalanceParams struct {
	Balance string `db:"balance" json:"balance"`
	Number  string `db:"number" json:"number"`
}

func (q *Queries) SubtractCardBalance(ctx context.Context, db DBTX, arg SubtractCardBalanceParams) error {
	_, err := db.ExecContext(ctx, subtractCardBalance, arg.Balance, arg.Number)
	return err
}
