// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: account.sql

package sqlc

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :exec
UPDATE accounts
SET balance = balance + $2
WHERE id = $1
`

type AddAccountBalanceParams struct {
	ID      int64   `db:"id" json:"id"`
	Balance float64 `db:"balance" json:"balance"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, db DBTX, arg AddAccountBalanceParams) error {
	_, err := db.ExecContext(ctx, addAccountBalance, arg.ID, arg.Balance)
	return err
}

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (user_id, currency_id, balance, name)
VALUES ($1, $2, 0, $3)
RETURNING id
`

type CreateAccountParams struct {
	UserID     int64  `db:"user_id" json:"user_id"`
	CurrencyID int64  `db:"currency_id" json:"currency_id"`
	Name       string `db:"name" json:"name"`
}

func (q *Queries) CreateAccount(ctx context.Context, db DBTX, arg CreateAccountParams) error {
	_, err := db.ExecContext(ctx, createAccount, arg.UserID, arg.CurrencyID, arg.Name)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE
FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT a.id, a.user_id, a.name, a.balance, a.currency_id, c.name as currency_name
FROM accounts a
       JOIN currency c on a.currency_id = c.id
WHERE a.id = $1
LIMIT 1
`

type GetAccountRow struct {
	ID           int64   `db:"id" json:"id"`
	UserID       int64   `db:"user_id" json:"user_id"`
	Name         string  `db:"name" json:"name"`
	Balance      float64 `db:"balance" json:"balance"`
	CurrencyID   int64   `db:"currency_id" json:"currency_id"`
	CurrencyName string  `db:"currency_name" json:"currency_name"`
}

func (q *Queries) GetAccount(ctx context.Context, db DBTX, id int64) (GetAccountRow, error) {
	row := db.QueryRowContext(ctx, getAccount, id)
	var i GetAccountRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Balance,
		&i.CurrencyID,
		&i.CurrencyName,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT a.id, a.user_id, a.name, a.balance, a.currency_id, c.name as currency_name
FROM accounts a
       JOIN currency c on a.currency_id = c.id
WHERE a.user_id = $1
`

type GetAccountsRow struct {
	ID           int64   `db:"id" json:"id"`
	UserID       int64   `db:"user_id" json:"user_id"`
	Name         string  `db:"name" json:"name"`
	Balance      float64 `db:"balance" json:"balance"`
	CurrencyID   int64   `db:"currency_id" json:"currency_id"`
	CurrencyName string  `db:"currency_name" json:"currency_name"`
}

func (q *Queries) GetAccounts(ctx context.Context, db DBTX, userID int64) ([]GetAccountsRow, error) {
	rows, err := db.QueryContext(ctx, getAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountsRow{}
	for rows.Next() {
		var i GetAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Balance,
			&i.CurrencyID,
			&i.CurrencyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subAccountBalance = `-- name: SubAccountBalance :exec
UPDATE accounts
SET balance = balance - $2
WHERE id = $1
`

type SubAccountBalanceParams struct {
	ID      int64   `db:"id" json:"id"`
	Balance float64 `db:"balance" json:"balance"`
}

func (q *Queries) SubAccountBalance(ctx context.Context, db DBTX, arg SubAccountBalanceParams) error {
	_, err := db.ExecContext(ctx, subAccountBalance, arg.ID, arg.Balance)
	return err
}
