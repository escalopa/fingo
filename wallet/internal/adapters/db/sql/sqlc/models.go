// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type TransactionType string

const (
	TransactionTypeDeposit    TransactionType = "deposit"
	TransactionTypeWithdrawal TransactionType = "withdrawal"
	TransactionTypeTransfer   TransactionType = "transfer"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType
	Valid           bool // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.TransactionType, nil
}

func (e TransactionType) Valid() bool {
	switch e {
	case TransactionTypeDeposit,
		TransactionTypeWithdrawal,
		TransactionTypeTransfer:
		return true
	}
	return false
}

func AllTransactionTypeValues() []TransactionType {
	return []TransactionType{
		TransactionTypeDeposit,
		TransactionTypeWithdrawal,
		TransactionTypeTransfer,
	}
}

type Account struct {
	ID         int64   `db:"id" json:"id"`
	UserID     int64   `db:"user_id" json:"user_id"`
	Name       string  `db:"name" json:"name"`
	Balance    float64 `db:"balance" json:"balance"`
	CurrencyID int16   `db:"currency_id" json:"currency_id"`
}

type Card struct {
	Number    string `db:"number" json:"number"`
	AccountID int64  `db:"account_id" json:"account_id"`
}

type Currency struct {
	ID   int16  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

type Transaction struct {
	ID                   uuid.UUID       `db:"id" json:"id"`
	Type                 TransactionType `db:"type" json:"type"`
	Amount               float64         `db:"amount" json:"amount"`
	SourceAccountID      sql.NullInt64   `db:"source_account_id" json:"source_account_id"`
	DestinationAccountID sql.NullInt64   `db:"destination_account_id" json:"destination_account_id"`
	CreatedAt            time.Time       `db:"created_at" json:"created_at"`
	IsRolledBack         bool            `db:"is_rolled_back" json:"is_rolled_back"`
}

type User struct {
	ID         int64     `db:"id" json:"id"`
	ExternalID uuid.UUID `db:"external_id" json:"external_id"`
}
