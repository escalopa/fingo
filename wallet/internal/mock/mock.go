// Code generated by MockGen. DO NOT EDIT.
// Source: ./wallet/internal/application/ports.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	core "github.com/escalopa/fingo/wallet/internal/core"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, uuid)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, uuid uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, uuid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, uuid)
}

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountRepository) CreateAccount(ctx context.Context, params core.CreateAccountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepositoryMockRecorder) CreateAccount(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepository)(nil).CreateAccount), ctx, params)
}

// DeleteAccount mocks base method.
func (m *MockAccountRepository) DeleteAccount(ctx context.Context, accountID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountRepositoryMockRecorder) DeleteAccount(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountRepository)(nil).DeleteAccount), ctx, accountID)
}

// GetAccount mocks base method.
func (m *MockAccountRepository) GetAccount(ctx context.Context, accountID int64) (core.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, accountID)
	ret0, _ := ret[0].(core.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountRepositoryMockRecorder) GetAccount(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountRepository)(nil).GetAccount), ctx, accountID)
}

// GetAccounts mocks base method.
func (m *MockAccountRepository) GetAccounts(ctx context.Context, userID int64) ([]core.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, userID)
	ret0, _ := ret[0].([]core.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockAccountRepositoryMockRecorder) GetAccounts(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockAccountRepository)(nil).GetAccounts), ctx, userID)
}

// MockCardRepository is a mock of CardRepository interface.
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository.
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance.
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockCardRepository) CreateCard(ctx context.Context, params core.CreateCardParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockCardRepositoryMockRecorder) CreateCard(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardRepository)(nil).CreateCard), ctx, params)
}

// DeleteCard mocks base method.
func (m *MockCardRepository) DeleteCard(ctx context.Context, cardNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, cardNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockCardRepositoryMockRecorder) DeleteCard(ctx, cardNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockCardRepository)(nil).DeleteCard), ctx, cardNumber)
}

// GetCard mocks base method.
func (m *MockCardRepository) GetCard(ctx context.Context, cardNumber string) (core.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", ctx, cardNumber)
	ret0, _ := ret[0].(core.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockCardRepositoryMockRecorder) GetCard(ctx, cardNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockCardRepository)(nil).GetCard), ctx, cardNumber)
}

// GetCardAccount mocks base method.
func (m *MockCardRepository) GetCardAccount(ctx context.Context, cardNumber string) (core.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardAccount", ctx, cardNumber)
	ret0, _ := ret[0].(core.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardAccount indicates an expected call of GetCardAccount.
func (mr *MockCardRepositoryMockRecorder) GetCardAccount(ctx, cardNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardAccount", reflect.TypeOf((*MockCardRepository)(nil).GetCardAccount), ctx, cardNumber)
}

// GetCards mocks base method.
func (m *MockCardRepository) GetCards(ctx context.Context, accountID int64) ([]core.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards", ctx, accountID)
	ret0, _ := ret[0].([]core.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards.
func (mr *MockCardRepositoryMockRecorder) GetCards(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockCardRepository)(nil).GetCards), ctx, accountID)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockTransactionRepository) Deposit(ctx context.Context, params core.CreateTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockTransactionRepositoryMockRecorder) Deposit(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockTransactionRepository)(nil).Deposit), ctx, params)
}

// GetTransaction mocks base method.
func (m *MockTransactionRepository) GetTransaction(ctx context.Context, transactionID uuid.UUID) (core.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, transactionID)
	ret0, _ := ret[0].(core.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTransactionRepositoryMockRecorder) GetTransaction(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransaction), ctx, transactionID)
}

// GetTransactions mocks base method.
func (m *MockTransactionRepository) GetTransactions(ctx context.Context, params core.GetTransactionsParams) ([]core.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, params)
	ret0, _ := ret[0].([]core.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactions(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactions), ctx, params)
}

// RollbackTransaction mocks base method.
func (m *MockTransactionRepository) RollbackTransaction(ctx context.Context, transactionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", ctx, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockTransactionRepositoryMockRecorder) RollbackTransaction(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).RollbackTransaction), ctx, transactionID)
}

// Transfer mocks base method.
func (m *MockTransactionRepository) Transfer(ctx context.Context, params core.CreateTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTransactionRepositoryMockRecorder) Transfer(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTransactionRepository)(nil).Transfer), ctx, params)
}

// Withdraw mocks base method.
func (m *MockTransactionRepository) Withdraw(ctx context.Context, params core.CreateTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockTransactionRepositoryMockRecorder) Withdraw(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockTransactionRepository)(nil).Withdraw), ctx, params)
}

// MockCardNumberGenerator is a mock of CardNumberGenerator interface.
type MockCardNumberGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockCardNumberGeneratorMockRecorder
}

// MockCardNumberGeneratorMockRecorder is the mock recorder for MockCardNumberGenerator.
type MockCardNumberGeneratorMockRecorder struct {
	mock *MockCardNumberGenerator
}

// NewMockCardNumberGenerator creates a new mock instance.
func NewMockCardNumberGenerator(ctrl *gomock.Controller) *MockCardNumberGenerator {
	mock := &MockCardNumberGenerator{ctrl: ctrl}
	mock.recorder = &MockCardNumberGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardNumberGenerator) EXPECT() *MockCardNumberGeneratorMockRecorder {
	return m.recorder
}

// GenCardNumber mocks base method.
func (m *MockCardNumberGenerator) GenCardNumber(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenCardNumber", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenCardNumber indicates an expected call of GenCardNumber.
func (mr *MockCardNumberGeneratorMockRecorder) GenCardNumber(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenCardNumber", reflect.TypeOf((*MockCardNumberGenerator)(nil).GenCardNumber), ctx)
}

// MockSmsSender is a mock of SmsSender interface.
type MockSmsSender struct {
	ctrl     *gomock.Controller
	recorder *MockSmsSenderMockRecorder
}

// MockSmsSenderMockRecorder is the mock recorder for MockSmsSender.
type MockSmsSenderMockRecorder struct {
	mock *MockSmsSender
}

// NewMockSmsSender creates a new mock instance.
func NewMockSmsSender(ctrl *gomock.Controller) *MockSmsSender {
	mock := &MockSmsSender{ctrl: ctrl}
	mock.recorder = &MockSmsSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmsSender) EXPECT() *MockSmsSenderMockRecorder {
	return m.recorder
}

// SendTransactionSms mocks base method.
func (m *MockSmsSender) SendTransactionSms(ctx context.Context, params core.SendTransactionSmsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransactionSms", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTransactionSms indicates an expected call of SendTransactionSms.
func (mr *MockSmsSenderMockRecorder) SendTransactionSms(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransactionSms", reflect.TypeOf((*MockSmsSender)(nil).SendTransactionSms), ctx, params)
}

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockLocker) Lock(ctx context.Context, x any, y ...any) func() {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, x}
	for _, a := range y {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lock", varargs...)
	ret0, _ := ret[0].(func())
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockLockerMockRecorder) Lock(ctx, x interface{}, y ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, x}, y...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLocker)(nil).Lock), varargs...)
}

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockValidator) Validate(ctx context.Context, s interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), ctx, s)
}
