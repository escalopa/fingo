// Code generated by MockGen. DO NOT EDIT.
// Source: wallet/internal/adapters/db/sql/sqlc/querier.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/escalopa/fingo/wallet/internal/adapters/db/sql/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddAccountBalance mocks base method.
func (m *MockQuerier) AddAccountBalance(ctx context.Context, db sqlc.DBTX, arg sqlc.AddAccountBalanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountBalance", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccountBalance indicates an expected call of AddAccountBalance.
func (mr *MockQuerierMockRecorder) AddAccountBalance(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountBalance", reflect.TypeOf((*MockQuerier)(nil).AddAccountBalance), ctx, db, arg)
}

// CreateAccount mocks base method.
func (m *MockQuerier) CreateAccount(ctx context.Context, db sqlc.DBTX, arg sqlc.CreateAccountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockQuerierMockRecorder) CreateAccount(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockQuerier)(nil).CreateAccount), ctx, db, arg)
}

// CreateCard mocks base method.
func (m *MockQuerier) CreateCard(ctx context.Context, db sqlc.DBTX, arg sqlc.CreateCardParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockQuerierMockRecorder) CreateCard(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockQuerier)(nil).CreateCard), ctx, db, arg)
}

// CreateDepositTransaction mocks base method.
func (m *MockQuerier) CreateDepositTransaction(ctx context.Context, db sqlc.DBTX, arg sqlc.CreateDepositTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepositTransaction", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDepositTransaction indicates an expected call of CreateDepositTransaction.
func (mr *MockQuerierMockRecorder) CreateDepositTransaction(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepositTransaction", reflect.TypeOf((*MockQuerier)(nil).CreateDepositTransaction), ctx, db, arg)
}

// CreateTransferTransaction mocks base method.
func (m *MockQuerier) CreateTransferTransaction(ctx context.Context, db sqlc.DBTX, arg sqlc.CreateTransferTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransferTransaction", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransferTransaction indicates an expected call of CreateTransferTransaction.
func (mr *MockQuerierMockRecorder) CreateTransferTransaction(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransferTransaction", reflect.TypeOf((*MockQuerier)(nil).CreateTransferTransaction), ctx, db, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, db sqlc.DBTX, externalID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, db, externalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, db, externalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, db, externalID)
}

// CreateWithdrawTransaction mocks base method.
func (m *MockQuerier) CreateWithdrawTransaction(ctx context.Context, db sqlc.DBTX, arg sqlc.CreateWithdrawTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawTransaction", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdrawTransaction indicates an expected call of CreateWithdrawTransaction.
func (mr *MockQuerierMockRecorder) CreateWithdrawTransaction(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawTransaction", reflect.TypeOf((*MockQuerier)(nil).CreateWithdrawTransaction), ctx, db, arg)
}

// DeleteAccount mocks base method.
func (m *MockQuerier) DeleteAccount(ctx context.Context, db sqlc.DBTX, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockQuerierMockRecorder) DeleteAccount(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockQuerier)(nil).DeleteAccount), ctx, db, id)
}

// DeleteAccountCards mocks base method.
func (m *MockQuerier) DeleteAccountCards(ctx context.Context, db sqlc.DBTX, accountID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountCards", ctx, db, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountCards indicates an expected call of DeleteAccountCards.
func (mr *MockQuerierMockRecorder) DeleteAccountCards(ctx, db, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountCards", reflect.TypeOf((*MockQuerier)(nil).DeleteAccountCards), ctx, db, accountID)
}

// DeleteCard mocks base method.
func (m *MockQuerier) DeleteCard(ctx context.Context, db sqlc.DBTX, number string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, db, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockQuerierMockRecorder) DeleteCard(ctx, db, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockQuerier)(nil).DeleteCard), ctx, db, number)
}

// GetAccount mocks base method.
func (m *MockQuerier) GetAccount(ctx context.Context, db sqlc.DBTX, id int64) (sqlc.GetAccountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, db, id)
	ret0, _ := ret[0].(sqlc.GetAccountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockQuerierMockRecorder) GetAccount(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockQuerier)(nil).GetAccount), ctx, db, id)
}

// GetAccountCards mocks base method.
func (m *MockQuerier) GetAccountCards(ctx context.Context, db sqlc.DBTX, accountID int64) ([]sqlc.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountCards", ctx, db, accountID)
	ret0, _ := ret[0].([]sqlc.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountCards indicates an expected call of GetAccountCards.
func (mr *MockQuerierMockRecorder) GetAccountCards(ctx, db, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountCards", reflect.TypeOf((*MockQuerier)(nil).GetAccountCards), ctx, db, accountID)
}

// GetAccounts mocks base method.
func (m *MockQuerier) GetAccounts(ctx context.Context, db sqlc.DBTX, userID int64) ([]sqlc.GetAccountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, db, userID)
	ret0, _ := ret[0].([]sqlc.GetAccountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockQuerierMockRecorder) GetAccounts(ctx, db, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockQuerier)(nil).GetAccounts), ctx, db, userID)
}

// GetCard mocks base method.
func (m *MockQuerier) GetCard(ctx context.Context, db sqlc.DBTX, number string) (sqlc.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", ctx, db, number)
	ret0, _ := ret[0].(sqlc.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockQuerierMockRecorder) GetCard(ctx, db, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockQuerier)(nil).GetCard), ctx, db, number)
}

// GetCardAccount mocks base method.
func (m *MockQuerier) GetCardAccount(ctx context.Context, db sqlc.DBTX, number string) (sqlc.GetCardAccountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardAccount", ctx, db, number)
	ret0, _ := ret[0].(sqlc.GetCardAccountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardAccount indicates an expected call of GetCardAccount.
func (mr *MockQuerierMockRecorder) GetCardAccount(ctx, db, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardAccount", reflect.TypeOf((*MockQuerier)(nil).GetCardAccount), ctx, db, number)
}

// GetCardBalance mocks base method.
func (m *MockQuerier) GetCardBalance(ctx context.Context, db sqlc.DBTX, number string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardBalance", ctx, db, number)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardBalance indicates an expected call of GetCardBalance.
func (mr *MockQuerierMockRecorder) GetCardBalance(ctx, db, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardBalance", reflect.TypeOf((*MockQuerier)(nil).GetCardBalance), ctx, db, number)
}

// GetCurrencyByID mocks base method.
func (m *MockQuerier) GetCurrencyByID(ctx context.Context, db sqlc.DBTX, id int64) (sqlc.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByID", ctx, db, id)
	ret0, _ := ret[0].(sqlc.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByID indicates an expected call of GetCurrencyByID.
func (mr *MockQuerierMockRecorder) GetCurrencyByID(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByID", reflect.TypeOf((*MockQuerier)(nil).GetCurrencyByID), ctx, db, id)
}

// GetCurrencyByName mocks base method.
func (m *MockQuerier) GetCurrencyByName(ctx context.Context, db sqlc.DBTX, name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByName", ctx, db, name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByName indicates an expected call of GetCurrencyByName.
func (mr *MockQuerierMockRecorder) GetCurrencyByName(ctx, db, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByName", reflect.TypeOf((*MockQuerier)(nil).GetCurrencyByName), ctx, db, name)
}

// GetTransaction mocks base method.
func (m *MockQuerier) GetTransaction(ctx context.Context, db sqlc.DBTX, id uuid.UUID) (sqlc.GetTransactionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, db, id)
	ret0, _ := ret[0].(sqlc.GetTransactionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockQuerierMockRecorder) GetTransaction(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockQuerier)(nil).GetTransaction), ctx, db, id)
}

// GetTransactions mocks base method.
func (m *MockQuerier) GetTransactions(ctx context.Context, db sqlc.DBTX, arg sqlc.GetTransactionsParams) ([]sqlc.GetTransactionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, db, arg)
	ret0, _ := ret[0].([]sqlc.GetTransactionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockQuerierMockRecorder) GetTransactions(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockQuerier)(nil).GetTransactions), ctx, db, arg)
}

// GetUserByExternalID mocks base method.
func (m *MockQuerier) GetUserByExternalID(ctx context.Context, db sqlc.DBTX, externalID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByExternalID", ctx, db, externalID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByExternalID indicates an expected call of GetUserByExternalID.
func (mr *MockQuerierMockRecorder) GetUserByExternalID(ctx, db, externalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByExternalID", reflect.TypeOf((*MockQuerier)(nil).GetUserByExternalID), ctx, db, externalID)
}

// GetUserCards mocks base method.
func (m *MockQuerier) GetUserCards(ctx context.Context, db sqlc.DBTX, userID int64) ([]sqlc.GetUserCardsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCards", ctx, db, userID)
	ret0, _ := ret[0].([]sqlc.GetUserCardsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCards indicates an expected call of GetUserCards.
func (mr *MockQuerierMockRecorder) GetUserCards(ctx, db, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCards", reflect.TypeOf((*MockQuerier)(nil).GetUserCards), ctx, db, userID)
}

// SetTransactionRolledBack mocks base method.
func (m *MockQuerier) SetTransactionRolledBack(ctx context.Context, db sqlc.DBTX, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTransactionRolledBack", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTransactionRolledBack indicates an expected call of SetTransactionRolledBack.
func (mr *MockQuerierMockRecorder) SetTransactionRolledBack(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransactionRolledBack", reflect.TypeOf((*MockQuerier)(nil).SetTransactionRolledBack), ctx, db, id)
}

// SubAccountBalance mocks base method.
func (m *MockQuerier) SubAccountBalance(ctx context.Context, db sqlc.DBTX, arg sqlc.SubAccountBalanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubAccountBalance", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubAccountBalance indicates an expected call of SubAccountBalance.
func (mr *MockQuerierMockRecorder) SubAccountBalance(ctx, db, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubAccountBalance", reflect.TypeOf((*MockQuerier)(nil).SubAccountBalance), ctx, db, arg)
}
